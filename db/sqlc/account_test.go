package db

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"github.com/techschool/simplebank/util"
)

// to prevent independent test unit so i created a duplicate TestCreateAccount that wouldn't be run as a unit test since no prefix Test before it.
func createRandomAccount(t *testing.T) Account{
	user := createRandomUser(t)

	arg := CreateAccountParams{
		Owner: user.Username,
		Balance: util.RandomBalance(),
		Currency: util.RandomCurrency(),
	}

	account, err := testQueries.CreateAccount(context.Background(), arg)
	require.NoError(t, err) // error must be a new one
	require.NotEmpty(t, account) // retured account must not be an empty object
	// ensure the account owner, balance & currency matches the input arguments
	require.Equal(t, arg.Owner, account.Owner) 
	require.Equal(t, arg.Balance, account.Balance)
	require.Equal(t, arg.Currency, account.Currency)

	require.NotZero(t, account.ID) // require/ensure that the account ID is autmoatically generated by postgres
	require.NotZero(t, account, account.CreatedAt) //createdAt should be filled programatically such that it must not be a zero value of it type

	return account
}

func TestCreateAccount(t *testing.T){
	createRandomAccount(t)
}


func TestGetAccount(t *testing.T){
	account1 := createRandomAccount(t)
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	require.NoError(t, err)
	require.NotEmpty(t, account2)
	
	require.Equal(t, account1.ID, account2.ID)
	require.Equal(t, account1.Owner, account2.Owner)
	require.Equal(t, account1.Balance, account2.Balance)
	require.Equal(t, account1.Currency, account2.Currency)
	require.WithinDuration(t, account1.CreatedAt, account2.CreatedAt, time.Second) //to check if the two timestamp are different by at least a second
}

func TestUpdateAccount(t *testing.T){
	account1 := createRandomAccount(t)

	arg := UpdateAccountParams{
		ID: account1.ID,
		Balance: util.RandomBalance(),
	}

	account2, err := testQueries.UpdateAccount(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, account2)
	
	require.Equal(t, account1.ID, account2.ID)
	require.Equal(t, account1.Owner, account2.Owner)
	require.Equal(t, arg.Balance, account2.Balance)
	require.Equal(t, account1.Currency, account2.Currency)
	require.WithinDuration(t, account1.CreatedAt, account2.CreatedAt, time.Second) //to check if the two timestamp are different by at least a second
}

func TestListAccounts(t *testing.T){
	//creating several accounts to test
	for i := 0; i < 10; i++ {
		createRandomAccount(t)
	}

	arg := ListAccountsParams {
		Limit: 5, //skip the first 5 records
		Offset: 5, //return the 5 records
	}

	accounts, err := testQueries.ListAccounts(context.Background(), arg)
	require.NoError(t, err)
	require.Len(t, accounts, 5) // require the length of the return account slice to be 5
	// we iterate through the list of the accounts and ensure they are not empty 
	for _, account := range accounts {
		require.NotEmpty(t, account)
	}
}

func TestDeleteAccount(t *testing.T){
	account1:= createRandomAccount(t)
	err := testQueries.DeleteAccount(context.Background(), account1.ID)
	require.NoError(t, err)

	// ensure it really deleted
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	require.Error(t, err)
	require.EqualError(t, err, sql.ErrNoRows.Error())
	require.Empty(t, account2)
}